package com.lgu.ccss.admin.login.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.lgu.ccss.admin.admin.domain.AdminVO;
import com.lgu.ccss.admin.login.service.LoginServiceImpl;
import com.lgu.ccss.common.domain.Constants;
import com.lgu.ccss.common.service.ServiceConfig;
import com.lgu.ccss.common.utility.SessionUtil;

@Controller
@RequestMapping(value = "/login")
public class LoginController {

    @Resource(name = "loginService")
	private LoginServiceImpl loginService;
    
    /**
     * 로그인 화면
     * @param request
     * @param params
     * @param model
     * @return
     */
    @RequestMapping(value = "/loginView.do")
    public String loginView(HttpServletRequest request, @RequestParam Map<String, String> params, ModelMap model) {

        return "/login/loginView";
    }
    
    
    /**
     * 로그인 처리
     * @param request
     * @param response
     * @param adminVO
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/excuteLogin.do")
    public Map<String, Object> excuteLogin(HttpServletRequest request, HttpServletResponse response, AdminVO adminVO) throws Exception {
		
    	String adminPwEnc = adminVO.getAdminPw();
    	AdminVO loginInfo = loginService.checkAdminPwd(adminVO);
		
		Map<String, Object> returnMap = new HashMap<String, Object>();
		if (loginInfo != null) {
			
			if (SessionUtil.get(request, Constants.SESSION_NAME) != null) {
				SessionUtil.invalidate(request);
			}
			loginInfo.setAdminPwEnc(adminPwEnc);
			SessionUtil.put(request, Constants.SESSION_NAME, loginInfo);
			
			SessionUtil.put(request, ServiceConfig.SESSION_KEY_USER_ID, loginInfo.getAdminId());
			SessionUtil.put(request, ServiceConfig.SESSION_KEY_USER_NAME, loginInfo.getAdminName());
			SessionUtil.put(request, "LOGIN_TYPE", "MANAGER");
			SessionUtil.put(request, "ROLE_ID", loginInfo.getAdminLevel());
			
			
			returnMap.put(Constants.RESULT, Constants.YES);
			returnMap.put("login_info", loginInfo);
			
			/* sms 2차 인증에서 수행하던 로직 1차 id/pw에서 수행 */
			String roleId = (String) request.getSession().getAttribute("ROLE_ID");
			HashMap menuMap = (HashMap) ServiceConfig.MENU_MAP.get(roleId);
			HashMap siteMap = (HashMap) menuMap.get("/");
			List _programList = (List)siteMap.get( "MENU_LIST_MAP" ); // 프로그램리스트
			Object[] _objProgramList = _programList.toArray();
			
			siteMap = (HashMap) siteMap.get("MENU_MAP");
			ArrayList _menuList = (ArrayList)siteMap.get("subNodeList"); // 메뉴리스트
			HashMap _menuMap = (HashMap)_menuList.get(0);
			String redirectUrl = getMenuUrl( _menuMap, _objProgramList );
			
			returnMap.put("redirectUrl", redirectUrl);
			
		} else {
			returnMap.put(Constants.RESULT, Constants.NOT_USER);
		}
		return returnMap;
	}
    

    /** 
     * 로그아웃 처리
     * @param request
     * @param response
     * @return
     * @throws Exception
     */
	@RequestMapping(value = "/excuteLogout.do")
	public String excuteLogout(HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session = request.getSession();
        session.invalidate();
        return "redirect:/login/loginView.do";
	}
	
	public String getMenuUrl(HashMap menuMap, Object[] programList) {

		String programUrl = "";
		ArrayList subMenuList = (ArrayList) menuMap.get("subNodeList");
		HashMap subMenuMap = new HashMap();
		if (subMenuList.size() > 0) {
			subMenuMap = (HashMap) subMenuList.get(0);
			String menuId = String.valueOf(subMenuMap.get("menuId"));
			for (int i = 0; i < programList.length; i++) {
				Map programMap = (Map) programList[i];
				String programMenuId = String.valueOf(programMap.get("menuId"));
				if (menuId.equals(programMenuId) && "Y".equals((String) programMap.get("stProgramYn"))) {
					programUrl = (String) programMap.get("programUrl");
					break;
				}
			}
		} else {
			programUrl = (String) menuMap.get("programUrl");
		}

		if (programUrl == null || "".equals(programUrl))
			programUrl = getMenuUrl(subMenuMap, programList);

		return programUrl;
	}
}
